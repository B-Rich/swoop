#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# A script to make executing a single command on multiple servers a little     #
# easier.  Place in a directory where binaries live such as /usr/local/sbin    #
# and set executable.                                                          #
#                                                                              #
# usage: swoop [-h print_help] [-v print_version]                              #
#              [command]                                                       #
# Example:  swoop service httpd reload                                         #
#                                                                              #
# Report bugs to Chris at zully_1@yahoo.com or https://github.com/zully/swoop  #
################################################################################

import re, os, sys

# swoop version
VERSION = 'v0.57b'

# user to swoop as
USER='root'

# function to print help/version
def pHelp(opt=''):
    if len(opt) != 0 and 'h' not in opt and 'v' not in opt:
        print 'swoop: illegal option(s) -- ' + opt
    elif 'v' in opt:
        print 'swoop ' + VERSION
    print '''usage: swoop [-h print_help] [-v print_version]
             [command]'''
    sys.exit(0)

# read iplist from file
def rFile(fname):
    iplist = []
    f = open(fname, 'r')
    for line in f:
        if '"' in line:
            ds = line.split('"')
        elif "'" in line:
            ds = line.split("'")
        else:
            ds = ([line])

        if not re.search('\A#', ds[0]):
            for d in ds:
                if re.match('(\d+\.\d+\.\d+\.\d+)', d):
                    iplist.append(d.strip('\n'))
    f.close()
    return iplist

def main(args):
    # check for arguments and print help if needed
    if len(args) == 0:
        pHelp()
    elif args[0].startswith('-'):
        pHelp(args[0].strip('-'))
    elif ' ' in args[0]:
        print 'swoop: Do not enclose your command in quotes'
        pHelp()
    else:
        deny_cmds = ['rm', 'poweroff', 'shutdown', 'reboot', 'halt']
        if args[0] in deny_cmds:
            print 'swoop: "%s" is not an allowed command!' % args[0]
            pHelp()

    # check if these files exist and set the filename
    configs = ['lsyncd-servers.conf', 'lsyncd/servers.conf']
    for config in configs:
        filename = '/etc/' + config
        if os.path.isfile(filename):
            fname = filename
            break

    # check for filename variable and read into list if exists
    iplist = []
    try:
        fname
    except:
        fname = None
    if fname != None:
        iplist = rFile(fname)

    # if no iplist, try and find it out of most recently modified config
    if len(iplist) == 0:
        fdict = {}
        fnames = ['lsyncd.lua', 'lsyncd/lsyncd.conf', 'lsyncd.conf']
        for fname in fnames:
            fname = '/etc/' + fname
            if os.path.isfile(fname):
                if os.path.getmtime(fname):
                    fdict[os.path.getmtime(fname)] = fname

        if len(fdict) != 0:
            fname = fdict[sorted(fdict.keys(), reverse=True)[0]]
            iplist = rFile(fname)

    # if we havent found an IP list by now, give up
    if len(iplist) == 0:
        print 'swoop: error -- unable to locate IP list!'
        sys.exit(1)

    # if we have made it this far, execute the command on all servers
    for i in range(0,len(args)):
        if ' ' in args[i]:
            args[i] = "\'%s\'" % args[i]
    cmd = ' '.join(args)
    
    print '-+- Attempting [%s] on local server -+-' % cmd
    os.system(cmd)

    for ip in iplist:
        print '-+- Attempting [%s] on %s -+-' % (cmd, ip)
        rCmd = 'ssh %s@%s %s' % (USER, ip, cmd)
        os.system(rCmd)

if __name__ == '__main__':
    main(sys.argv[1:])
