#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# A script to make executing a single command on multiple servers a little     #
# easier.  Place in a directory where binaries live such as /usr/local/sbin    #
# and set executable.                                                          #
#                                                                              #
# usage: swoop [-h print_help] [-v print_version]                              #
#              [command]                                                       #
# Example:  swoop service httpd reload                                         #
#                                                                              #
# Report bugs to Chris at zully_1@yahoo.com or https://github.com/zully/swoop  #
################################################################################

from subprocess import call
from re import match
from os.path import isfile
from os.path import getmtime
from sys import argv
from sys import exit

# swoop version
VERSION = 'v0.2b'

# user to swoop as
USER='root'

# function to print help/version
def pHelp(opt=''):
    if len(opt) != 0 and 'h' not in opt and 'v' not in opt:
        print 'swoop: illegal option(s) -- ' + opt
    elif 'v' in opt:
        print 'swoop ' + VERSION
    print '''usage: swoop [-h print_help] [-v print_version]
             [command]'''
    exit(0)

# read iplist from file
def rFile(fname):
    iplist = []
    f = open(fname, 'r')
    for line in f:
        line = line.strip('{}= ",\n')
        if match('(\d+\.\d+\.\d+\.\d+)', line):
            iplist.append(line)
    return iplist

def main(args):
    # check for arguments and print help if needed
    if len(args) == 0:
        pHelp()
    elif '-' in args[0]:
        pHelp(args[0].strip('-'))
      

    # check if these files exist and set the filename
    if isfile('/etc/lsyncd-servers.conf'):
        fname = '/etc/lsyncd-servers.conf'
    elif isfile('/etc/lsyncd/servers.conf'):
        fname = '/etc/lsyncd/servers.conf'

    # check for filename variable and read into list if exists
    iplist = []
    try:
        fname
    except:
        fname = None
    if fname != None:
        iplist = rFile(fname)

    # if no iplist, try and find it out of most recently modified config
    if len(iplist) == 0:
        fdict = {}
        fnames = ['lsyncd.lua', 'lsyncd/lsyncd.conf', 'lsyncd.conf']
        for fname in fnames:
            fname = '/etc/' + fname
            if isfile(fname):
                if getmtime(fname):
                    fdict[getmtime(fname)] = fname

        if len(fdict) != 0:
            fname = fdict[sorted(fdict.keys(), reverse=True)[0]]
            iplist = rFile(fname)

    # if we havent found an IP list by now, give up
    if len(iplist) == 0:
        print 'swoop: error -- unable to locate IP list!'
        exit(1)

    # if we have made it this far, execute the command on all servers
    cmd = ' '.join(args)
    print '-+- Attempting [%s] on local server -+-' % cmd
    try:
        call(args)
    except Exception, e:
        print 'swoop: %s -- cannot continue!' % e
        exit(1)

    for ip in iplist:
        print '-+- Attempting [%s] on %s -+-' % (cmd, ip)
        cmdlst = ['ssh']
        cmdlst.append('%s@%s' % (USER, ip))
        cmdlst.extend(args)
        try:
            call(cmdlst)
        except Exception, e:
            print 'swoop: %s' % e

if __name__ == '__main__':
    main(argv[1:])
